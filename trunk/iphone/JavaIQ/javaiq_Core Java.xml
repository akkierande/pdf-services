<questionbank group="Core Java">
	<category name="Basics">
		<question><![CDATA[What if the main method is declared as private?]]></question>
		<answer><![CDATA[The program compiles properly but at runtime it will give "Main method not public." message.]]></answer>
		<question><![CDATA[If you???re overriding the method equals() of an object, which other method you might also consider?]]></question>
		<answer><![CDATA[hashCode()]]></answer>
		<question><![CDATA[Expain the reason for each keyword of public static void main(String args[])?]]></question>
		<answer><![CDATA[public- main(..) is the first method called by java environment when a program is executed so it has to accessible from java environment. Hence the access specifier has to be public.           static: Java environment should be able to call this method without creating an instance of the class , so this method must be declared as static. 	  void: main does not return anything so the return type must be void           The argument String indicates the argument type which is given at the command line and arg is an array for string given during command line.]]></answer>
		<question><![CDATA[What if the static modifier is removed from the signature of the main method?   What if I do not provide the String array as the argument to the method?]]></question>
		<answer><![CDATA[Program compiles. But at runtime throws an error "NoSuchMethodError".]]></answer>
		<question><![CDATA[What is the difference between final, finally and finalize? What do you understand by the java final keyword?   What is final, finalize() and finally?   What is finalize() method?   What is the difference between final, finally and finalize?   What does it mean that a class or member is final?]]></question>
		<answer><![CDATA[o final - declare constant  o finally - handles exception  o finalize - helps in garbage collection  Variables defined in an interface are implicitly final. A final class can???t be extended i.e., final class may not be subclassed. This is done for security reasons with basic classes like String and Integer. It also allows the compiler to make some optimizations, and makes thread safety a little easier to achieve. A final method can???t be overridden when its class is inherited. You can???t change value of a final variable (is a constant). finalize() method is used just before an object is destroyed and garbage collected. finally, a key word used in exception handling and will be executed whether or not an exception is thrown. For example, closing of open connections is done in the finally method.]]></answer>
		<question><![CDATA[What is the GregorianCalendar class?]]></question>
		<answer><![CDATA[The GregorianCalendar provides support for traditional Western calendars.]]></answer>
		<question><![CDATA[Why there are no global variables in Java?]]></question>
		<answer><![CDATA[Global variables are globally accessible. Java does not support globally accessible variables due to following reasons:]]></answer>
		<question><![CDATA[What is the SimpleTimeZone class?]]></question>
		<answer><![CDATA[The SimpleTimeZone class provides support for a Gregorian calendar.]]></answer>
		<question><![CDATA[What is the Locale class?]]></question>
		<answer><![CDATA[The Locale class is used to tailor a program output to the conventions of a particular geographic, political, or cultural region.]]></answer>
		<question><![CDATA[Explain the Inheritance principle.]]></question>
		<answer><![CDATA[Inheritance is the process by which one object acquires the properties of another object. Inheritance allows well-tested procedures to be reused and enables changes to make once and have effect in all relevant places]]></answer>
		<question><![CDATA[Is sizeof a keyword in java?]]></question>
		<answer><![CDATA[The sizeof operator is not a keyword.]]></answer>
		<question><![CDATA[In System.out.println(), what is System, out and println?]]></question>
		<answer><![CDATA[System is a predefined final class, out is a PrintStream object and println is a built-in overloaded method in the out object.]]></answer>
		<question><![CDATA[What is explicit casting?]]></question>
		<answer><![CDATA[Explicit casting in the process in which the complier are specifically informed about transforming the object. Example long i = 700.20; int j = (int) i; //Explicit casting]]></answer>
		<question><![CDATA[What do you understand by downcasting?]]></question>
		<answer><![CDATA[The process of Downcasting refers to the casting from a general to a more specific type, i.e. casting down the hierarchy]]></answer>
		<question><![CDATA[Which class is the superclass of every class?]]></question>
		<answer><![CDATA[Object.]]></answer>
		<question><![CDATA[What is the difference between static and non-static variables?  What are class variables?What is static in java?What is a static method?]]></question>
		<answer><![CDATA[A static variable is associated with the class as a whole rather than with specific instances of a class. Each object will share a common copy of the static variables i.e. there is only one copy per class, no matter how many objects are created from it. Class variables or static variables are declared with the static keyword in a class. These are declared outside a class and stored in static memory. Class variables are mostly used for constants. Static variables are always called by the class name. This variable is created when the program starts and gets destroyed when the programs stops. The scope of the class variable is same an instance variable. Its initial value is same as instance variable and gets a default value when its not initialized corresponding to the data type. Similarly, a static method is a method that belongs to the class rather than any object of the class and doesn???t apply to an object or even require that any objects of the class have been instantiated.  Static methods are implicitly final, because overriding is done based on the type of the object, and static methods are attached to a class, not an object. A static method in a superclass can be shadowed by another static method in a subclass, as long as the original method was not declared final. However, you can???t override a static method with a non-static method. In other words, you can???t change a static method into an instance method in a subclass.  Non-static variables take on unique values with each object instance.]]></answer>
		<question><![CDATA[How does Java handle integer overflows and underflows?]]></question>
		<answer><![CDATA[It uses those low order bytes of the result that can fit into the size of the type allowed by the operation.]]></answer>
		<question><![CDATA[What is the difference between declaring a variable and defining a variable?]]></question>
		<answer><![CDATA[In declaration we only mention the type of the variable and its name without initializing it. Defining means declaration + initialization. E.g. String s; is just a declaration while String s = new String ("bob"); Or String s = "bob"; are both definitions.]]></answer>
		<question><![CDATA[Explain the Encapsulation principle.]]></question>
		<answer><![CDATA[Encapsulation is a process of binding or wrapping the data and the codes that operates on the data into a single entity. This keeps the data safe from outside interface and misuse. Objects allow procedures to be encapsulated with their data to reduce potential interference. One way to think about encapsulation is as a protective wrapper that prevents code and data from being arbitrarily accessed by other code defined outside the wrapper.]]></answer>
		<question><![CDATA[What do you understand by numeric promotion?]]></question>
		<answer><![CDATA[The Numeric promotion is the conversion of a smaller numeric type to a larger numeric type, so that integral and floating-point operations may take place. In the numerical promotion process the byte, char, and short values are converted to int values. The int values are also converted to long values, if necessary. The long and float values are converted to double values, as required.]]></answer>
		<question><![CDATA[What is the first argument of the String array in main method?]]></question>
		<answer><![CDATA[The String array is empty. It does not have any element. This is unlike C/C++ where the first element by default is the program name. If we do not provide any arguments on the command line, then the String array of main method will be empty but not null.]]></answer>
		<question><![CDATA[Can an application have multiple classes having main method?]]></question>
		<answer><![CDATA[Yes. While starting the application we mention the class name to be run. The JVM will look for the main method only in the class whose name you have mentioned. Hence there is not conflict amongst the multiple classes having main method.]]></answer>
		<question><![CDATA[Can I have multiple main methods in the same class?]]></question>
		<answer><![CDATA[We can have multiple overloaded main methods but there can be only one main method with the following signature : public static void main(String[] args) {}   No the program fails to compile. The compiler says that the main method is already defined in the class.]]></answer>
		<question><![CDATA[How can I swap two variables without using a third variable?]]></question>
		<answer><![CDATA[Add two variables and assign the value into First variable. Subtract the Second value with the result Value. and assign to Second variable. Subtract the Result of First Variable With Result of Second Variable and Assign to First Variable. Example: int a=5,b=10;a=a+b; b=a-b; a=a-b;]]></answer>
		<question><![CDATA[What is data encapsulation?]]></question>
		<answer><![CDATA[Encapsulation may be used by creating ???get??? and ???set??? methods in a class (JAVABEAN) which are used to access the fields of the object. Typically the fields are made private while the get and set methods are public. Encapsulation can be used to validate the data that is to be stored, to do calculations on data that is stored in a field or fields, or for use in introspection (often the case when using javabeans in Struts, for instance). Wrapping of data and function into a single unit is called as data encapsulation. Encapsulation is nothing but wrapping up the data and associated methods into a single unit in such a way that data can be accessed with the help of associated methods. Encapsulation provides data security. It is nothing but data hiding.]]></answer>
		<question><![CDATA[Does JVM maintain a cache by itself? Does the JVM allocate objects in heap? Is this the OS heap or the heap maintained by the JVM? Why]]></question>
		<answer><![CDATA[Yes, the JVM maintains a cache by itself. It creates the Objects on the HEAP, but references to those objects are on the STACK.]]></answer>
		<question><![CDATA[Can a method be static and synchronized?]]></question>
		<answer><![CDATA[A static method can be synchronized. If you do so, the JVM will obtain a lock on the java.lang.Class instance associated with the object. It is similar to saying: synchronized(XYZ.class) { }]]></answer>
	</category>
	<category name="Classes and Objects">
		<question><![CDATA[What restrictions are placed on method overloading?]]></question>
		<answer><![CDATA[Two methods may not have the same name and argument list but different return types.]]></answer>
		<question><![CDATA[Can a private method of a superclass be declared within a subclass?]]></question>
		<answer><![CDATA[Sure. A private field or method or inner class belongs to its declared class and hides from its subclasses.  There is no way for private stuff to have a runtime overloading or overriding (polymorphism) features.]]></answer>
		<question><![CDATA[Can a top-level class be private or protected?]]></question>
		<answer><![CDATA[No. A top-level class cannot be private or protected. It can have either "public" or no modifier. If it does not have a modifier it is supposed to have a default access. If a top level class is declared as private/protected the compiler will complain that the "modifier private is not allowed here".]]></answer>
		<question><![CDATA[Where and how can you use a private constructor?]]></question>
		<answer><![CDATA[Private constructor can be used if you do not want any other class to instantiate the class. This concept is generally used in Singleton Design Pattern. The instantiation of such classes is done from a static public method.]]></answer>
		<question><![CDATA[What is Method Overriding? What restrictions are placed on method overriding?]]></question>
		<answer><![CDATA[When a class defines a method using the same name, return type, and argument list as that of a method in its superclass, the method in the subclass is said to override the method present in the Superclass. When the method is invoked for an object of the class, it is the new definition of the method that is called, and not the method definition from superclass.  Restrictions placed on method overriding  ??? Overridden methods must have the same name, argument list, and return type.  ??? The overriding method may not limit the access of the method it overrides. Methods may be overridden to be more public, not more private.  ??? The overriding method may not throw any exceptions that may not be thrown by the overridden method.]]></answer>
		<question><![CDATA[What is a singleton class? What is singleton pattern?]]></question>
		<answer><![CDATA[This design pattern is used by an application to ensure that at any time there is only one instance of a class created. You can achieve this by having the private constructor in the class and having a getter method which returns an object of the class and creates one for the first time if its null.]]></answer>
		<question><![CDATA[If a class is declared without any access modifiers, where may the class be accessed?]]></question>
		<answer><![CDATA[A class that is declared without any access modifiers is said to have package or default access. This means that the class can only be accessed by other classes and interfaces that are defined within the same package.]]></answer>
		<question><![CDATA[Which java.util classes and interfaces support event handling?]]></question>
		<answer><![CDATA[The EventObject class and the EventListener interface support event processing]]></answer>
		<question><![CDATA[What is the purpose of the Runtime class?]]></question>
		<answer><![CDATA[The purpose of the Runtime class is to provide access to the Java runtime system.]]></answer>
		<question><![CDATA[What is the purpose of the System class?]]></question>
		<answer><![CDATA[The purpose of the System class is to provide access to system resources.]]></answer>
		<question><![CDATA[What is a bean? Where can it be used?]]></question>
		<answer><![CDATA[A Bean is a reusable and self-contained software component. Beans created using java take advantage of all the security and platform independent features of java. Bean can be plugged into any software application. Bean is a simple class which has set and get methods. It could be used within a JSP using JSP tags to use them.]]></answer>
		<question><![CDATA[What would happen if you say this = null?]]></question>
		<answer><![CDATA[It will come up with Error Message "The left-hand side of an assignment must be a variable".]]></answer>
		<question><![CDATA[What is the difference between an object and an instance?]]></question>
		<answer><![CDATA[An Object May not have a class definition. eg int a[] where a is an array. An Instance should have a class definition.   eg MyClass my=new MyClass(); my is an instance.]]></answer>
		<question><![CDATA[Why default constructor of base class will be called first in java?]]></question>
		<answer><![CDATA[A subclass inherits all the methods and fields (eligible one) from the base class, so base class is constructed in the process of creation of subclass object (subclass is also an object of superclass). Hence before initializing the default value of sub class the super class should be initialized using the default constructor.]]></answer>
		<question><![CDATA[What is the difference between instance, object, reference and a class?]]></question>
		<answer><![CDATA[Class: A class is a user defined data type with set of data members & member functions   Object: An Object is an instance of a class   Reference: A reference is just like a pointer pointing to an object   Instance: This represents the values of data members of a class at a particular timeExtracting :/java-questions/java-exceptions-questions]]></answer>
		<question><![CDATA[What classes of exceptions may be caught by a catch clause?]]></question>
		<answer><![CDATA[A catch clause can catch any exception that may be assigned to the Throwable type. This includes the Error and Exception types. Errors are generally irrecoverable conditions   Error???s are irrecoverable exceptions. Usually a program terminates when an error is encountered.]]></answer>
		<question><![CDATA[What class of exceptions are generated by the Java run-time system?]]></question>
		<answer><![CDATA[The Java runtime system generates Runtime Exceptions and Errors.]]></answer>
		<question><![CDATA[What are Checked and Unchecked Exceptions?]]></question>
		<answer><![CDATA[A checked exception is some subclass of Exception (or Exception itself), excluding class RuntimeException and its subclasses. Making an exception checked forces client programmers to deal with the exception may be thrown. Checked exceptions must be caught at compile time. Example: IOException.     Unchecked exceptions are RuntimeException and any of its subclasses. Class Error and its subclasses also are unchecked. With an unchecked exception, however, the compiler doesn???t force client programmers either to catch the exception or declare it in a throws clause. In fact, client programmers may not even know that the exception could be thrown. Example: ArrayIndexOutOfBoundsException. Errors are often irrecoverable conditions.]]></answer>
		<question><![CDATA[Does the order of placing catch statements matter in the catch block?]]></question>
		<answer><![CDATA[Yes, it does. The FileNoFoundException is inherited from the IOException. So FileNoFoundException is caught before IOException. Exception???s subclasses have to be caught first before the General Exception Extracting :/java-questions/java-abstract-class-and-interface-interview-questions]]></answer>
		<question><![CDATA[What does it mean that a method or class is abstract?]]></question>
		<answer><![CDATA[An abstract class cannot be instantiated. Only its subclasses can be instantiated. A class that has one or more abstract methods must be declared abstract. A subclass that does not provide an implementation for its inherited abstract methods must also be declared abstract. You indicate that a class is abstract with the abstract keyword like this: public abstract class AbstractClass   Abstract classes may contain abstract methods. A method declared abstract is not actually implemented in the class. It exists only to be overridden in subclasses.    Abstract methods may only be included in abstract classes. However, an abstract class is not required to have any abstract methods, though most of them do. Each subclass of an abstract class must override the abstract methods of its superclasses  or itself be declared abstract. Only the method???s prototype is provided in the class definition. Also, a final method can not be abstract and vice versa. Methods specified in an interface are implicitly abstract.It has no body. For example, :public abstract float getInfo()]]></answer>
		<question><![CDATA[What is an abstract method?]]></question>
		<answer><![CDATA[An abstract method is a method whose implementation is deferred to a subclass.]]></answer>
		<question><![CDATA[What is an abstract class? Can you make an instance of an abstract class?]]></question>
		<answer><![CDATA[Abstract classes can contain abstract and concrete methods. Abstract classes cannot be instantiated directly i.e. we cannot call the constructor of an abstract class directly nor we can create an instance of an abstract class by using "Class.forName().newInstance()" (Here we get java.lang.InstantiationException). However, if we create an instance of a class that extends an Abstract class, compiler will initialize both the classes. Here compiler will implicitly call the constructor of the Abstract class. Any class that contain an abstract method must be declared "abstract" and abstract methods can have definitions only in child classes. By overriding and customizing the abstract methods in more than one subclass makes "Polymorphism" and through Inheritance we define body to the abstract methods. Basically an abstract class serves as a template. Abstract class must be extended/subclassed for it to be implemented. A class may be declared abstract even if it has no abstract methods. This prevents it from being instantiated. Abstract class is a class that provides some general functionality but leaves specific implementation to its inheriting classes.   Example of Abstract class:   abstract class AbstractClassExample{   protected String name;  public String getname() {  return name;  }  public abstract void function();  }  Example: Vehicle is an abstract class and Bus Truck, car etc are specific implementations   No! You cannot make an instance of an abstract class. An abstract class has to be sub-classed.  If you have an abstract class and you want to use a method which has been implemented, you may  need to subclass that abstract class, instantiate your subclass and then call that method.]]></answer>
		<question><![CDATA[How to define an Interface?]]></question>
		<answer><![CDATA[In Java Interface defines the methods but does not implement them. Interface can include constants.  A class that implements the interfaces is bound to implement all the methods defined in Interface.  Example of Interface: public interface SampleInterface {  public void functionOne();  public long CONSTANT_ONE = 1000;  }]]></answer>
	</category>
	<category name="Collections">
		<question><![CDATA[What is HashMap and Map?]]></question>
		<answer><![CDATA[Map is Interface and Hashmap is class that implements this interface.]]></answer>
		<question><![CDATA[Difference between HashMap and HashTable? Can we make hashmap synchronized?]]></question>
		<answer><![CDATA[Note on Some Important Terms  1)Synchronized means only one thread can modify a hash table at one point of time. Basically, it means that any thread before performing an update on a hashtable will have to acquire a lock on the object while others will wait for lock to be released.  2)Fail-safe is relevant from the context of iterators. If an iterator has been created on a collection object and some other thread tries to modify the collection object "structurally", a concurrent modification exception will be thrown. It is possible for other threads though to invoke "set" method since it doesn???t modify the collection "structurally". However, if prior to calling "set", the collection has been modified structurally, "IllegalArgumentException" will be thrown.   HashMap can be synchronized by   Map m = Collections.synchronizeMap(hashMap);]]></answer>
		<question><![CDATA[Difference between Vector and ArrayList? What is the Vector class?]]></question>
		<answer><![CDATA[Vector is synchronized whereas ArrayList is not. The Vector class provides the capability to implement a growable array of objects. ArrayList and Vector class both implement the List interface. Both classes are implemented using dynamically resizable arrays, providing fast random access and fast traversal. In vector the data is retrieved using the elementAt() method while in ArrayList, it is done using the get() method. ArrayList has no default size while vector has a default size of 10. when you want programs to run in multithreading environment then use concept of vector because it is synchronized. But ArrayList is not synchronized so, avoid use of it in a multithreading environment.]]></answer>
		<question><![CDATA[What is the Collections API?]]></question>
		<answer><![CDATA[The Collections API is a set of classes and interfaces that support operations on collections of objects.  Example of classes: HashSet, HashMap, ArrayList, LinkedList, TreeSet and TreeMap.  Example of interfaces: Collection, Set, List and Map.]]></answer>
		<question><![CDATA[How can we access elements of a collection?]]></question>
		<answer><![CDATA[We can access the elements of a collection using the following ways:  1.Every collection object has get(index) method to get the element of the object. This method will return Object.  2.Collection provide Enumeration or Iterator object so that we can get the objects of a collection one by one.]]></answer>
		<question><![CDATA[What???s the difference between a queue and a stack?]]></question>
		<answer><![CDATA[Stack is a data structure that is based on last-in-first-out rule (LIFO), while queues are based on First-in-first-out (FIFO) rule.]]></answer>
		<question><![CDATA[What is the Properties class?]]></question>
		<answer><![CDATA[The properties class is a subclass of Hashtable that can be read from or written to a stream. It also provides the capability to specify a set of default values to be used.]]></answer>
		<question><![CDATA[How can we use hashset in collection interface?]]></question>
		<answer><![CDATA[This class implements the set interface, backed by a hash table (actually a HashMap instance). It makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time. This class permits the Null element. This class offers constant time performance for the basic operations (add, remove, contains and size), assuming the hash function disperses the elements properly among the buckets.]]></answer>
		<question><![CDATA[What is difference between array & arraylist?]]></question>
		<answer><![CDATA[An ArrayList is resizable, where as, an array is not. ArrayList is a part of the Collection Framework. We can store any type of objects, and we can deal with only objects. It is growable. Array is collection of similar data items. We can have array of primitives or objects. It is of fixed size. We can have multi dimensional arrays.   Array: can store primitive ArrayList: Stores object only   Array: fix size ArrayList: resizable   Array: can have multi dimensional   Array: lang ArrayList: Collection framework]]></answer>
		<question><![CDATA[What method should the key class of Hashmap override?]]></question>
		<answer><![CDATA[The methods to override are equals() and hashCode().]]></answer>
	</category>
	<category name="Garbage collection">
		<question><![CDATA[Explain garbage collection?   How you can force the garbage collection?   What is the purpose of garbage collection in Java, and when is it used?   What is Garbage Collection and how to call it explicitly?   Explain Garbage collection mechanism in Java?]]></question>
		<answer><![CDATA[Garbage collection is one of the most important features of Java. The purpose of garbage collection is to identify and discard objects that are no longer needed by a program so that their resources can be reclaimed and reused. A Java object is subject to garbage collection when it becomes unreachable to the program in which it is used. Garbage collection is also called automatic memory management as JVM automatically removes the unused variables/objects (value is null) from the memory. Every class inherits finalize() method from java.lang.Object, the finalize() method is called by garbage collector when it determines no more references to the object exists. In Java, it is good idea to explicitly assign null into a variable when no more in use. In Java on calling System.gc() and Runtime.gc(), JVM tries to recycle the unused objects, but there is no guarantee when all the objects will garbage collected. Garbage collection is an automatic process and can???t be forced. There is no guarantee that Garbage collection will start immediately upon request of System.gc().]]></answer>
		<question><![CDATA[Does garbage collection guarantee that a program will not run out of memory?]]></question>
		<answer><![CDATA[Garbage collection does not guarantee that a program will not run out of memory. It is possible for programs to use up memory resources faster than they are garbage collected. It is also possible for programs to create objects that are not subject to garbage collection.]]></answer>
	</category>
	<category name="Serialization">
		<question><![CDATA[How many methods in the Serializable interface? Which methods of Serializable interface should I implement?]]></question>
		<answer><![CDATA[There is no method in the Serializable interface. It???s an empty interface which does not contain any methods. The Serializable interface acts as a marker, telling the object serialization tools that the class is serializable. So we do not implement any methods.]]></answer>
		<question><![CDATA[What interface must an object implement before it can be written to a stream as an object?]]></question>
		<answer><![CDATA[An object must implement the Serializable or Externalizable interface before it can be written to a stream as an object. The class whose instances are to be serialized should implement an interface Serializable. Then you pass the instance to the ObjectOutputStream which is connected to a fileoutputstream. This will save the object to a file.]]></answer>
		<question><![CDATA[What is serialization?]]></question>
		<answer><![CDATA[The serialization is a kind of mechanism that makes a class or a bean persistent by having its properties or fields and state information saved and restored to and from storage. That is, it is a mechanism with which you can save the state of an object by converting it to a byte stream.]]></answer>
		<question><![CDATA[What happens to the static fields of a class during serialization?]]></question>
		<answer><![CDATA[There are three exceptions in which serialization doesn???t necessarily read and write to the stream. These are  1. Serialization ignores static fields, because they are not part of any particular state.  2. Base class fields are only handled if the base class itself is serializable.  3. Transient fields.]]></answer>
		<question><![CDATA[What is a transient variable?  Explain the usage of the keyword transient?  What are Transient and Volatile Modifiers]]></question>
		<answer><![CDATA[A transient variable is a variable that may not be serialized i.e. the value of the variable can???t be written to the stream in a Serializable class. If you don???t want some field to be serialized, you can mark that field transient or static. In such a case when the class is retrieved from the ObjectStream the value of the variable is null.  Volatile modifier applies to variables only and it tells the compiler that the variable modified by volatile can be changed unexpectedly by other parts of the program.]]></answer>
	</category>
	<category name="Swing">
		<question><![CDATA[What is the difference between Swing and AWT components?]]></question>
		<answer><![CDATA[AWT components are heavy-weight, whereas Swing components are lightweight. Hence Swing works faster than AWT. Heavy weight components depend on the local windowing toolkit. For example, java.awt.Button is a heavy weight component. Pluggable look and feel possible using java Swing. Also, we can switch from one look and feel to another at runtime in swing which is not possible in AWT.]]></answer>
		<question><![CDATA[How can a GUI component handle its own events?]]></question>
		<answer><![CDATA[A component can handle its own events by implementing the required event-listener interface and adding itself as its own event listener.]]></answer>
		<question><![CDATA[Which package has light weight components?]]></question>
		<answer><![CDATA[javax.Swing package contains light weight components. All components in Swing, except JApplet, JDialog, JFrame and JWindow are lightweight components.]]></answer>
		<question><![CDATA[What is a Container in a GUI?]]></question>
		<answer><![CDATA[A Container contains and arranges other components (including other containers) through the use of layout managers, which use specific layout policies to determine where components should go as a function of the size of the container.]]></answer>
		<question><![CDATA[What advantage do Java???s layout managers provide over traditional windowing systems?]]></question>
		<answer><![CDATA[Java uses layout managers to lay out components in a consistent manner across all windowing platforms. Since Java???s layout managers aren???t tied to absolute sizing and positioning, they are able to accommodate platform-specific differences among windowing systems.]]></answer>
		<question><![CDATA[Which Container method is used to cause a container to be laid out and redisplayed?]]></question>
		<answer><![CDATA[validate()]]></answer>
		<question><![CDATA[What is the purpose of the enableEvents() method?]]></question>
		<answer><![CDATA[The enableEvents() method is used to enable an event for a particular component. Normally, an event is enabled when a listener is added to an object for a particular event. The enableEvents() method is used by objects that handle events by overriding their event-dispatch methods.]]></answer>
		<question><![CDATA[What do heavy weight components mean?]]></question>
		<answer><![CDATA[Heavy weight components like Abstract Window Toolkit (AWT) depend on the local windowing toolkit. For example, java.awt .Button is a heavy weight component.]]></answer>
		<question><![CDATA[What is the preferred size of a component?]]></question>
		<answer><![CDATA[The preferred size of a component is the minimum component size that will allow the component to display normally.]]></answer>
	</category>
	<category name="threads">
		<question><![CDATA[What are three ways in which a thread can enter the waiting state?   What are different ways in which a thread can enter the waiting state?]]></question>
		<answer><![CDATA[A thread can enter the waiting state by the following ways:  1. Invoking its sleep() method,  2. By blocking on I/O  3. By unsuccessfully attempting to acquire an object???s lock  4. By invoking an object???s wait() method.  5. It can also enter the waiting state by invoking its (deprecated) suspend() method.]]></answer>
		<question><![CDATA[Extending Thread class or implementing Runnable Interface. Which is better?]]></question>
		<answer><![CDATA[You have two ways to do so. First, making your class "extends" Thread class. The other way is making your class implement "Runnable" interface. The latter is more advantageous, cause when you are going for multiple inheritance, then only interface can help. . If you are already inheriting a different class, then you have to go for Runnable Interface. Otherwise you can extend Thread class. Also, if you are implementing interface, it means you have to implement all methods in the interface. Both Thread class and Runnable interface are provided for convenience and use them as per the requirement. But if you are not extending any class, better extend Thread class as it will save few lines of coding. Otherwise performance wise, there is no distinguishable difference. A thread is in the ready state after it has been created and started.]]></answer>
		<question><![CDATA[What is the difference between preemptive scheduling and time slicing?]]></question>
		<answer><![CDATA[Under preemptive scheduling, the highest priority task executes until it enters the waiting or dead states or a higher priority task comes into existence. Under time slicing, a task executes for a predefined slice of time and then re-enters the pool of ready tasks. The scheduler then determines which task should execute next, based on priority and other factors.]]></answer>
		<question><![CDATA[What is the purpose of the wait(), notify(), and notifyAll() methods?]]></question>
		<answer><![CDATA[The wait(), notify() and notifyAll() methods are used to provide an efficient way for thread inter-communication.]]></answer>
		<question><![CDATA[What is deadlock?]]></question>
		<answer><![CDATA[When two threads are waiting for each other and can???t proceed until the first thread obtains a lock on the other thread or vice versa, the program is said to be in a deadlock.]]></answer>
		<question><![CDATA[What are synchronized methods and synchronized statements?]]></question>
		<answer><![CDATA[Synchronized methods are methods that are used to control access to an object. A thread only executes a synchronized method after it has acquired the lock for the method???s object or class. Synchronized statements are similar to synchronized methods. A synchronized statement can only be executed after a thread has acquired the lock for the object or class referenced in the synchronized statement.]]></answer>
		<question><![CDATA[What???s the difference between the methods sleep() and wait()?]]></question>
		<answer><![CDATA[The sleep method is used when the thread has to be put aside for a fixed amount of time. Ex: sleep(1000), puts the thread aside for exactly one second. The wait method is used to put the thread aside for up to the specified time. It could wait for much lesser time if it receives a notify() or notifyAll() call. Ex: wait(1000), causes a wait of up to one second. The method wait() is defined in the Object and the method sleep() is defined in the class Thread.]]></answer>
		<question><![CDATA[What is daemon thread and which method is used to create the daemon thread?]]></question>
		<answer><![CDATA[Daemon threads are threads with low priority and runs in the back ground doing the garbage collection operation for the java runtime system. The setDaemon() method is used to create a daemon thread. These threads run without the intervention of the user. To determine if a thread is a daemon thread, use the accessor method isDaemon() When a standalone application is run then as long as any user threads are active the JVM cannot terminate, otherwise the JVM terminates along with any daemon threads which might be active. Thus a daemon thread is at the mercy of the runtime system. Daemon threads exist only to serve user threads.]]></answer>
		<question><![CDATA[When you will synchronize a piece of your code?]]></question>
		<answer><![CDATA[When you expect that your shared code will be accessed by different threads and these threads may change a particular data causing data corruption, then they are placed in a synchronized construct or a synchronized method.]]></answer>
		<question><![CDATA[What is an object???s lock and which objects have locks?]]></question>
		<answer><![CDATA[Answer: An object???s lock is a mechanism that is used by multiple threads to obtain synchronized access to the object. A thread may execute a synchronized method of an object only after it has acquired the object???s lock. All objects and classes have locks. A class???s lock is acquired on the class???s Class object.]]></answer>
		<question><![CDATA[What state does a thread enter when it terminates its processing?]]></question>
		<answer><![CDATA[When a thread terminates its processing, it enters the dead state.]]></answer>
	</category>
</questionbank>